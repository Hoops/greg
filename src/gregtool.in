#!/bin/sh
# -*- scheme -*-
exec @GUILE@ $GUILE_FLAGS -e '(@@ (gregtool) main)' -s "$0" "$@"
!#

;;#!@GUILE@
;;;; greg - Regression testing command-line tool
;;;;
;;;; Copyright (C) 1998 Free Software Foundation, Inc.
;;;;
;;;; Written by:  Richard frith-Macdonald <rfm@gnu.org>
;;;; Date: 1998
;;;;   
;;;; This file is part of the Greg package - part of the GNUstep project.
;;;;
;;;; This library is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU Lesser General Public
;;;; License as published by the Free Software Foundation; either
;;;; version 2.1 of the License, or (at your option) any later version.
;;;; 
;;;; This library is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;; Lesser General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU Lesser General Public
;;;; License along with this library; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
;;;;

;;; Dynamically link the glue code for accessing the pty library,
;;; but only when it isn't already present.
;;; Don't think we need to do this.
;;; (if (not (module-has-feature? greg 'greg-pty))
;;;     (dynamic-call "scm_init_greg" (dynamic-link "libgreg.so")))

(define-module (gregtool)
  #:use-module (ice-9 getopt-long)
  #:use-module (ice-9 expect)
  #:use-module (srfi srfi-1)
  #:use-module (greg))

(define (option-ref-list options key default)
  "Return list of values in alist OPTIONS using KEY, a symbol; or DEFAULT if not found."
  (let ((vals (fold (lambda (x l)
                      (if (eq? key (car x))
                          (cons (cdr x) l)
                          l))
                    '() options)))
    (if (null? vals) default vals)))

(define (main args)
  (let* ((option-spec `((version (single-char #\V))
                        (verbose (single-char #\v) (value #t))
                        (debug)
                        (help)
                        (file    (value #t) (predicate ,file-exists?))
                        (objdir  (value #t) (predicate ,file-is-directory?))
                        (outdir  (value #t) (predicate ,file-is-directory?))
                        (srcdir  (value #t) (predicate ,file-is-directory?))
                        (posix)
                        (tool    (value #t) (predicate ,file-is-directory?))))
         (options (getopt-long args option-spec))
         (help-wanted (option-ref options 'help #f))
         (verbose (string->number (option-ref options 'verbose "-1")))
         (version-wanted (option-ref options 'version #f))
         (posix (option-ref options 'posix #f))
         (debug (option-ref options 'debug #f))
         (objdir (option-ref options 'objdir ""))
         (outdir (option-ref options 'outdir ""))
         (srcdir (option-ref options 'srcdir ""))
         (file-list (option-ref-list options 'file '()))
         (paths (option-ref options '() '()))
         (tooldirs (option-ref-list options 'tool '())))
    (if (or version-wanted help-wanted)
        (begin
          (if version-wanted
              (begin
                (display "Greg version  ")
		(display (greg-version))
                (display "\n")
                (display "Guile version ")
                (display (version))
                (display "\n")
                (exit 0)))
          (if help-wanted
              (begin
                (display "Greg is a Gnustep REGression testing framework,

With no options - runs tests in the 'tests' directory
USAGE: greg [options...]
        --debug (-de)            Perform debug logging
        --file [name(s)]         Limit test files to use
        --objdir [name]          Where to find binaries
        --outdir [name]          Where to put log files
        --path [name(s)]         Run specific files rather
                                 than test directories
        --posix                  Make it POSIX-compliant
        --srcdir [name]          Where to put find tests
        --tool [name(s)]         Test directories to use
        --verbose (-v)           More detailed output
        --version (-V)           Output version numbers

")
                (newline)))
          (exit 0)))
    (or (null? tooldirs) (set! greg-tools tooldirs))
    (or (null? file-list) (set! greg-files file-list))
    (set! greg-debug debug)
    (set! greg-out-dir outdir)
    (set! greg-obj-dir objdir)
    (set! greg-src-dir srcdir)
    (set! greg-verbose (1+ verbose))
    (set! greg-posix posix)
    (set! greg-paths paths)
    ;; Run tests and return 0 on success, 1 on any error.
    (exit (if (greg-test-run) 0 1))))
